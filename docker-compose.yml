version: '3.3'

services:
  backend1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend1
    env_file:
      - .env
    volumes:
      - .env:/.env
    ports:
      - "${GRPC_SERVER_PORT}:${GRPC_SERVER_PORT}"
      - "${REST_SERVER_PORT}:${REST_SERVER_PORT}"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network

  backend2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend2
    env_file:
      - .env
    environment:
      - GRPC_SERVER_PORT=${GRPC_SERVER_PORT2}
    ports:
      - "${GRPC_SERVER_PORT2}:${GRPC_SERVER_PORT2}"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network


  backend3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend3
    env_file:
      - .env
    environment:
      - GRPC_SERVER_PORT=${GRPC_SERVER_PORT3}
    ports:
      - "${GRPC_SERVER_PORT3}:${GRPC_SERVER_PORT3}"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network


  postgres:
    image: postgres:15-alpine
    container_name: postgres_container
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "psql -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis_container
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - ./redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  nginx:
    image: nginx
    container_name: nginx_container
    ports:
      - "80:80"
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend1
      - backend2
      - backend3
    networks:
      - app-network


volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
